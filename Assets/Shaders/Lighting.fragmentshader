#version 330 core

struct Material {
	float ambient;
	float specular;
	float shininess;
};

struct Light {
	vec3 position;
	vec3 color;
};

uniform Light light;
uniform Material material;
uniform sampler2D textureSampler;

uniform vec3 viewPos;

out vec4 color;

in vec3 v_color;
in vec3 v_normal;
in vec3 v_pos;
in vec2 v_uv;

void main()
{

	// ambient
	vec3 ambient = light.color * material.ambient;

	// diffuse lighting
	vec3 normal = normalize(v_normal);
	vec3 lightDir = normalize(light.position - v_pos);
	float diff = max(dot(normal, lightDir), 0.0f);
	vec3 diffuse = light.color * diff;

	// specular
	vec3 viewDir = normalize(viewPos - v_pos);
	vec3 reflectionDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectionDir), 0.0f), material.shininess);
	vec3 specular = light.color * spec *  material.specular;


	vec3 lightCol = (ambient + diffuse + specular) * v_color;
	

	// set the fragment color to the interpolated vertex color
	color = vec4(lightCol, 1.0f);
}